name: "Dependency Review"

on:
  pull_request:
    branches: [ "main", "security", "dev*" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  dependency-review:
    name: Review Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        # Fail on critical or high severity vulnerabilities
        fail-on-severity: high
        # Deny licenses that are incompatible
        deny-licenses: GPL-3.0, AGPL-3.0, LGPL-3.0
        # Allow common permissive licenses
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, Python-2.0
        # Comment on PR with findings
        comment-summary-in-pr: always
        # Fail on packages with copyleft licenses
        fail-on-scopes: runtime, development
        # Additional vulnerability database sources
        vulnerability-check: true
        # Check for malicious packages
        allow-ghsas: ""
        # Show vulnerabilities in output
        show-openssf-scorecard: true
        # Retry failed requests
        retry-on-snapshot-warnings: true

    - name: Upload Dependency Review Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-review-results
        path: dependency-review-*.json
        retention-days: 30

    - name: Python Dependency Audit
      if: always()
      run: |
        pip install pip-audit
        pip-audit --desc --format json --output pip-audit-results.json || true

    - name: Upload pip-audit Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pip-audit-results
        path: pip-audit-results.json
        retention-days: 30

    - name: Comment PR with Security Summary
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🔒 Dependency Security Review\n\n';
          
          // Check if pip-audit results exist
          if (fs.existsSync('pip-audit-results.json')) {
            const pipAudit = JSON.parse(fs.readFileSync('pip-audit-results.json', 'utf8'));
            const vulnCount = pipAudit.dependencies?.filter(d => d.vulns?.length > 0).length || 0;
            
            if (vulnCount > 0) {
              comment += `⚠️ **pip-audit found ${vulnCount} vulnerable package(s)**\n\n`;
              comment += 'Please review the artifacts for detailed vulnerability information.\n\n';
            } else {
              comment += '✅ **pip-audit**: No known vulnerabilities detected\n\n';
            }
          }
          
          comment += '📊 **Dependency Review**: Check the workflow logs for license and vulnerability analysis.\n\n';
          comment += '🔍 **Actions Taken**:\n';
          comment += '- ✅ Scanned for known vulnerabilities (CVEs)\n';
          comment += '- ✅ Checked license compatibility\n';
          comment += '- ✅ Verified OpenSSF Scorecard ratings\n';
          comment += '- ✅ Analyzed dependency changes\n\n';
          comment += '---\n';
          comment += '*Automated security review by GitHub Actions*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
